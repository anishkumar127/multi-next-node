  // useEffect(() => {
  //   (async () => {
  //     console.log("api call b token", token);
  //     const headers = {
  //       Authorization: `Bearer ${token}`,
  //     };
  //     try {
  //       const response = await axios.get(
  //         `https://${site}.sharepoint.com/sites/anish/_api/web/lists/getByTitle('HR365HDMTickets')/items`,
  //         {
  //           headers,
  //         }
  //       );
  //       console.log("HDMTICKETS", response);
  //     } catch (error: any) {
  //       console.log("other tanet error", error);
  //       console.log("Status code Error", error?.response?.status);
  //       const StatusCode = error?.response?.status;
  //       // if(StatusCode===401){
  //       //     const getSilentToken = async () => {
  //       //         const msalConfig = {
  //       //           auth: {
  //       //             clientId: "f3a16a31-d908-4145-b5ef-1d7ce6e03f68", // clayfly
  //       //             clientId: "afb54906-660f-4a68-8178-74c638699fcc", // shan cubic direct
  //       //             authority: "https://login.microsoftonline.com/common/", // multi tanet
  //       //           },
  //       //           cache: {
  //       //             // cacheLocation: BrowserCacheLocation.LocalStorage // "localStorage"
  //       //             // cacheLocation: BrowserCacheLocation.SessionStorage // "sessionStorage"
  //       //           },
  //       //         };
  //       //         const pca =
  //       //           await PublicClientApplication.createPublicClientApplication(
  //       //             msalConfig
  //       //           );

  //       //         const accounts = await pca.getAllAccounts();
  //       //         if (accounts.length === 0) {
  //       //           const loginRequest = {
  //       //             scopes: [`https://${site}.sharepoint.com/.default`],
  //       //           };
  //       //           const loginResponse = await pca.loginPopup(loginRequest);
  //       //           await pca.setActiveAccount(loginResponse.account);
  //       //         } else {
  //       //           await pca.setActiveAccount(accounts[0]);
  //       //         }
  //       //         // acquire token
  //       //         const acquireTokenScope = {
  //       //           scopes: [`https://${site}.sharepoint.com/.default`],
  //       //           loginHint: `${accounts[0]?.username}`,
  //       //         };

  //       //         pca
  //       //           .acquireTokenSilent(acquireTokenScope)
  //       //           .then((tokenResponse: any) => {
  //       //             console.log("acquire token silent", tokenResponse);
  //       //             console.log(
  //       //               "Context acquire token silent=>",
  //       //               tokenResponse.accessToken
  //       //             );
  //       //             setToken(tokenResponse.accessToken);
  //       //           })
  //       //           .catch(async (error: any) => {
  //       //             // if (error instanceof InteractionRequiredAuthError) {
  //       //             //     return await pca.acquireTokenPopup(acquireTokenScope); // fallback to interaction when silent call fails
  //       //             // }
  //       //             if (error instanceof InteractionRequiredAuthError) {
  //       //               const loginResponse = await pca
  //       //                 .loginPopup(acquireTokenScope)
  //       //                 .catch((error: any) => {
  //       //                   console.log("error popup", error);
  //       //                 });
  //       //             } else {
  //       //               console.log("error silent", error);
  //       //             }
  //       //             console.log("acquire token silent error", error);
  //       //           });
  //       //       };
  //       //       getSilentToken();
  //       // }


  //     }
  //   })();
  // }, [token]);



// error 

// const getSilentToken = async () => {
        //   const msalConfig = {
        //     auth: {
        //       clientId: "f3a16a31-d908-4145-b5ef-1d7ce6e03f68", // clayfly
        //       authority: "https://login.microsoftonline.com/common/", // multi tanet
        //     },
        //     cache: {
        //       // cacheLocation: BrowserCacheLocation.LocalStorage // "localStorage"
        //       // cacheLocation: BrowserCacheLocation.SessionStorage // "sessionStorage"
        //     },
        //   };
        //   const pca =
        //     await PublicClientApplication.createPublicClientApplication(
        //       msalConfig
        //     );

        //   const accounts = await pca.getAllAccounts();
        //   if (accounts.length === 0) {
        //     const loginRequest = {
        //       scopes: [`https://${site}.sharepoint.com/.default`],
        //     };
        //     const loginResponse = await pca.loginPopup(loginRequest);
        //     await pca.setActiveAccount(loginResponse.account);
        //   } else {
        //     await pca.setActiveAccount(accounts[0]);
        //   }
        //   //acquire token
        //   const acquireTokenScope = {
        //     scopes: [`https://${site}.sharepoint.com/.default`],
        //     loginHint: `${accounts[0]?.username}`,
        //   };

        //   pca
        //     .acquireTokenSilent(acquireTokenScope)
        //     .then((tokenResponse: any) => {
        //       console.log("acquire token silent", tokenResponse);
        //       console.log(
        //         "Context acquire token silent=>",
        //         tokenResponse.accessToken
        //       );
        //       setToken(tokenResponse.accessToken);
        //     })
        //     .catch(async (error: any) => {
        //       // if (error instanceof InteractionRequiredAuthError) {
        //       //     return await pca.acquireTokenPopup(acquireTokenScope); // fallback to interaction when silent call fails
        //       // }
        //       if (error instanceof InteractionRequiredAuthError) {
        //         const loginResponse = await pca
        //           .loginPopup(acquireTokenScope)
        //           .catch((error: any) => {
        //             console.log("error popup", error);
        //           });
        //       } else {
        //         console.log("error silent", error);
        //       }
        //       console.log("acquire token silent error", error);
        //     });
        // };
        // getSilentToken();